//=============================================================================
//
// メッシュウォール処理 [meshwall.cpp]
// Author : Eisuke Sakagawa
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "meshwall.h"		// メッシュウォール
#include "manager.h"		// マネージャー
#include "input.h"			// 入力
#include "renderer.h"		// レンダラー

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_NAME	"data\\TEXTURE\\stone000.jpg"		// テクスチャ

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9		CMeshWall::m_pTexture = NULL;		// テクスチャ情報へのポインタ

//=============================================================================
// コンストラクタ									(public)	*** CMeshWall ***
//=============================================================================
CMeshWall::CMeshWall() : CMesh3D(CScene::PRIORITY_1)
{

}

//=============================================================================
// デストラクタ										(public)	*** CMeshWall ***
//=============================================================================
CMeshWall::~CMeshWall()
{

}

//=============================================================================
// ロード処理							(public)	*** CMeshWall ***
//=============================================================================
HRESULT CMeshWall::Load(void)
{
	if (m_pTexture == NULL)
	{// NULLの場合
		// デバイス取得
		LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

		// テクスチャの生成
		D3DXCreateTextureFromFile(pDevice, TEXTURE_NAME, &m_pTexture);
	}

	return S_OK;
}

//=============================================================================
// アンロード処理								(public)	*** CMeshWall ***
//=============================================================================
void CMeshWall::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{// NULL以外の場合
		m_pTexture->Release();		// 解放
		m_pTexture = NULL;			// NULLへ
	}
}

//=============================================================================
// 確保処理											(public)	*** CMeshWall ***
//=============================================================================
CMeshWall *CMeshWall::Create(MESHTYPE meshType, D3DXVECTOR3 num, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col, D3DXVECTOR2 TexUV, MESHTEX meshTex)
{
	CMeshWall *pMeshWall = NULL;				// ポインタ

	if (pMeshWall == NULL)
	{// NULLの場合
		pMeshWall = new CMeshWall;				// メモリ確保
	}

	if (pMeshWall != NULL)
	{// NULL以外の場合
		pMeshWall->Init(meshType, num, pos, rot, size, col, TexUV, meshTex);		// 初期化処理
		pMeshWall->SetObjType(CScene::OBJTYPE_MESHWALL);							// オブジェクトタイプ設定
		pMeshWall->BindTexture(m_pTexture);											// テクスチャ設定
	}

	return pMeshWall;		// 値を返す
}

//=============================================================================
// 初期化処理										(public)	*** CMeshWall ***
//=============================================================================
HRESULT CMeshWall::Init(MESHTYPE meshType, D3DXVECTOR3 num, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col, D3DXVECTOR2 TexUV, MESHTEX meshTex)
{
	CMesh3D::SetInitAll(meshType, num, pos, rot, size, col, TexUV, meshTex);		// 初期値設定
	CMesh3D::Init();																// 初期化処理

	return S_OK;
}

//=============================================================================
// 終了処理											(public)	*** CMeshWall ***
//=============================================================================
void CMeshWall::Uninit(void)
{
	CMesh3D::Uninit();		// 終了処理
}

//=============================================================================
// 更新処理											(public)	*** CMeshWall ***
//=============================================================================
void CMeshWall::Update(void)
{

}

//=============================================================================
// 描画処理											(public)	*** CMeshWall ***
//=============================================================================
void CMeshWall::Draw(void)
{
	CMesh3D::Draw();		// 描画処理
}