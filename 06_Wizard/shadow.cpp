//=============================================================================
//
// 影処理 [shadow.cpp]
// Author : Eisuke Sakagawa
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "shadow.h"		// 影
#include "manager.h"	// マネージャー
#include "renderer.h"	// レンダラー
#include "light.h"		// ライト

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ									(public)	*** CShadow ***
//=============================================================================
CShadow::CShadow()
{

}

//=============================================================================
// デストラクタ									(public)	*** CShadow ***
//=============================================================================
CShadow::~CShadow()
{

}

//=============================================================================
// 初期化処理									(public)	*** CShadow ***
//=============================================================================
HRESULT CShadow::Init(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// 終了処理										(public)	*** CShadow ***
//=============================================================================
void CShadow::Uninit(void)
{

}

//=============================================================================
// 更新処理										(public)	*** CShadow ***
//=============================================================================
void CShadow::Update(void)
{

}

//=============================================================================
// 描画処理										(public)	*** CShadow ***
//=============================================================================
void CShadow::Draw(void)
{

}

//=========================================================================================================================
// 影設定処理
//=========================================================================================================================
void CShadow::SetShadow(D3DXMATRIX &mtxWorld, LPD3DXMESH &pMesh, DWORD &nNumMat, D3DXVECTOR3 pos)
{
	LPDIRECT3DDEVICE9	pDevice = CManager::GetRenderer()->GetDevice();			// デバイスの取得
	D3DLIGHT9			Light = CManager::GetLight()->GetLightVec();			// ライト取得
	D3DXVECTOR4			vLightDirection = D3DXVECTOR4(Light.Direction, 0.0f);	// ライト方向

	//影用の射影マトリクスを作成
	D3DXMATRIX		mmatrixShadow;					// 影マトリックス
	D3DXVECTOR3		vPoint = pos;					// 位置
	D3DXVECTOR3		vNormal(0.0f, -1.0f, 0.0f);		// 法線
	D3DXPLANE		GroundPlane;					// 地面
	D3DXPlaneFromPointNormal(&GroundPlane, &vPoint, &vNormal);			// 地面設定
	D3DXMatrixShadow(&mmatrixShadow, &vLightDirection, &GroundPlane);	// 影設定

	mmatrixShadow = mtxWorld * mmatrixShadow;		// マトリックス調整

	D3DMATERIAL9 matDef;							// 現在のマテリアル保存用

	// 現在のマテリアルを取得
	pDevice->GetMaterial(&matDef);

	//影用マテリアルの設定
	D3DMATERIAL9 Material;							// マテリアル	
	ZeroMemory(&Material, sizeof(D3DMATERIAL9));	// 初期化

	// 色設定
	Material.Emissive.a = 1.0f;	
	Material.Emissive.r = 0.1f;
	Material.Emissive.g = 0.1f;
	Material.Emissive.b = 0.1f;

	pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);		// αブレンドを停止

	//影としてレンダリング
	pDevice->SetTransform(D3DTS_WORLD, &mmatrixShadow);
	pDevice->SetMaterial(&Material);	// マテリアル設定

	for (int nCntMat = 0; nCntMat < (int)nNumMat; nCntMat++)
	{// マテリアル数カウント
		pMesh->DrawSubset(nCntMat);		// 描画
	}
	pDevice->SetMaterial(&matDef);		// 現在のマテリアル戻す

	pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);		// αブレンドを行う
}