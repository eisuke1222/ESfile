//=============================================================================
//
// テクスチャアニメーション処理 [texanim.cpp]
// Author : Eisuke Sakagawa
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "texanim.h"		// テクスチャアニメーション
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラー
#include "input.h"			// 入力
#include "texture.h"		// テクスチャ

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ										(public)	*** CTexAnim ***
//=============================================================================
CTexAnim::CTexAnim() : CScene(CScene::PRIORITY_4, CScene::OBJTYPE_EFFECT)
{
	// 初期値設定
	m_pTexture	= NULL;
	m_pos		= D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// 位置
	m_size		= D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// 大きさ
	m_move		= D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// 移動量
	m_size		= D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// 大きさ
	m_texUV		= D3DXVECTOR2(0.0f, 0.0f);				// UV
	m_col		= D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);	// 色

	m_bAutoAnim = false;								// 自動アニメーション
	m_nMaxAnim	= 0;									// アニメーション数
	m_nMaxLine	= 0;									// ライン数
	m_nCntAnim	= 0;									// アニメーションカウント	
	m_nSpeed	= 0;									// アニメーション速度
	m_nPattern	= 0;									// パターン数

	m_bBillBoard = false;								// ビルボードか
}

//=============================================================================
// デストラクタ										(public)	*** CTexAnim ***
//=============================================================================
CTexAnim::~CTexAnim()
{

}

//=============================================================================
// ロード処理										(public)	*** CTexAnim ***
//=============================================================================
HRESULT CTexAnim::Load(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// アンロード処理										(public)	*** CTexAnim ***
//=============================================================================
void CTexAnim::Unload(void)
{

}

//=============================================================================
// クリエイト										(public)	*** CTexAnim ***
//=============================================================================
CTexAnim *CTexAnim::Create(TYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 move, D3DXVECTOR3 size, D3DXVECTOR2 texUV, D3DXCOLOR col, LPDIRECT3DTEXTURE9 pTexture)
{
	CTexAnim *pAnim = NULL;			// ポインタ

	if (pAnim == NULL)
	{// NULLの場合
		if(type == TYPE_2D)			// メモリ確保
			pAnim = new CAnim2D;		// アニメーション2D
		else if (type == TYPE_3D ||
			type == TYPE_3D_BILL)	// メモリ確保
			pAnim = new CAnim3D;		// アニメーション3D
	}

	if (pAnim != NULL)
	{// NULL以外の場合
		pAnim->m_pos		= pos;			// 位置
		pAnim->m_move		= move;			// 移動量
		pAnim->m_size		= size;			// 大きさ
		pAnim->m_texUV		= texUV;		// UV
		pAnim->m_col		= col;			// 色
		pAnim->m_pTexture	= pTexture;		// テクスチャ

		if (type == TYPE_3D_BILL)			// ビルボードか
			pAnim->m_bBillBoard = true;

		pAnim->Init();						// 初期化処理
	}

	return pAnim;	// 値を返す
}

//=============================================================================
// 終了処理											(public)	*** CTexAnim ***
//=============================================================================
void CTexAnim::Uninit(void)
{
	CScene::SetDeath();		// 死亡フラグ
}

//-----------------------------------------------------------------------------

//=============================================================================
// コンストラクタ										(public)	*** CAnim2D ***
//=============================================================================
CAnim2D::CAnim2D() : CTexAnim()
{
	m_pAnim2D = NULL;		// アニメーション2D
}

//=============================================================================
// デストラクタ										(public)	*** CAnim2D ***
//=============================================================================
CAnim2D::~CAnim2D()
{

}

//=============================================================================
// ロード処理										(public)	*** CAnim2D ***
//=============================================================================
HRESULT CAnim2D::Load(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// アンロード処理										(public)	*** CAnim2D ***
//=============================================================================
void CAnim2D::Unload(void)
{

}

//=============================================================================
// 初期化処理										(public)	*** CAnim2D ***
//=============================================================================
HRESULT CAnim2D::Init(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// 終了処理											(public)	*** CAnim2D ***
//=============================================================================
void CAnim2D::Uninit(void)
{
	CTexAnim::Uninit();		// 終了処理
}

//=============================================================================
// 更新処理											(public)	*** CAnim2D ***
//=============================================================================
void CAnim2D::Update(void)
{

}

//=============================================================================
// 描画処理											(public)	*** CAnim2D ***
//=============================================================================
void CAnim2D::Draw(void)
{

}

//-----------------------------------------------------------------------------

//=============================================================================
// コンストラクタ										(public)	*** CAnim3D ***
//=============================================================================
CAnim3D::CAnim3D() : CTexAnim()
{
	m_pAnim3D = NULL;		// アニメーション3D
}

//=============================================================================
// デストラクタ										(public)	*** CAnim3D ***
//=============================================================================
CAnim3D::~CAnim3D()
{

}

//=============================================================================
// ロード処理										(public)	*** CAnim3D ***
//=============================================================================
HRESULT CAnim3D::Load(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// アンロード処理										(public)	*** CAnim3D ***
//=============================================================================
void CAnim3D::Unload(void)
{

}

//=============================================================================
// 初期化処理										(public)	*** CAnim3D ***
//=============================================================================
HRESULT CAnim3D::Init(void)
{
	if (m_pAnim3D == NULL)
		m_pAnim3D = new CScene3D(CScene::PRIORITY_4, CScene::OBJTYPE_EFFECT);		// メモリ確保

	if (m_pAnim3D != NULL)
	{// NULL以外の場合
		// 初期値設定
		if (m_bBillBoard == true)
			m_pAnim3D->SetInitAll(m_pos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), m_size, m_col, m_texUV, CScene3D::SCENE3DTYPE_BILLBOARD);
		else
			m_pAnim3D->SetInitAll(m_pos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), m_size, m_col, m_texUV, CScene3D::SCENE3DTYPE_NORMAL);
		// 初期化処理
		m_pAnim3D->Init();
		// テクスチャ反映
		m_pAnim3D->BindTexture(m_pTexture);
		// 描画編集
		if (m_bBillBoard == true)
			m_pAnim3D->DrawEdit(true, false, false, true, true);
		else
			m_pAnim3D->DrawEdit(false, false, false, true, true);

		// テクスチャ設定
		m_pAnim3D->SetTex(m_nMaxLine, m_nPattern, m_texUV, D3DXVECTOR2(0.0f, 0.0f));
	}

	return S_OK;
}

//=============================================================================
// 終了処理											(public)	*** CAnim3D ***
//=============================================================================
void CAnim3D::Uninit(void)
{
	if (m_pAnim3D != NULL)
	{// NULL以外の場合
		m_pAnim3D->Uninit();	// 終了処理
		m_pAnim3D = NULL;		// NULLへ
	}

	CTexAnim::Uninit();		// 終了処理
}

//=============================================================================
// 更新処理											(public)	*** CAnim3D ***
//=============================================================================
void CAnim3D::Update(void)
{
	if (m_pAnim3D != NULL)
	{// NULL以外の場合
		D3DXVECTOR3 pos = m_pAnim3D->Getpos();
		pos += m_move;
		m_pAnim3D->Setpos(pos);

		if (m_bAutoAnim == true)
		{// 自動アニメーションする
			bool bDelete = false;	// 破棄するか
			m_nCntAnim++;			// フレームカウント

			if (m_nCntAnim % m_nSpeed == 0)
			{// 切り替えるフレームだったら
				if (m_bLoop == true)
				{// ループする
					m_nPattern = (m_nPattern + 1) % m_nMaxAnim;		// パターンを進める
				}
				else
				{// ループしない
					m_nPattern++;	// パターンを進める

					if (m_nPattern == m_nMaxAnim)
					{// パターンが最後まで行った
						bDelete = true;		// 破棄
					}
				}

				if (bDelete == false)
				{// 破棄しない
					// テクスチャ設定
					m_pAnim3D->SetTex(m_nMaxLine, m_nPattern, m_texUV, D3DXVECTOR2(0.0f, 0.0f));
				}
			}

			if (bDelete == true)
			{// 破棄する
				Uninit();		// 終了処理
			}
		}
	}
}

//=============================================================================
// 描画処理											(public)	*** CAnim3D ***
//=============================================================================
void CAnim3D::Draw(void)
{
	if (m_pAnim3D != NULL)
		m_pAnim3D->Draw();		// 描画処理
}