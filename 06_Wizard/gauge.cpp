//=============================================================================
//
// ゲージ処理 [gause.cpp]
// Author : Eisuke Sakagawa
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "gauge.h"			// ゲージ
#include "manager.h"		// マネージャー
#include "renderer.h"		// レンダラー
#include "input.h"			// 入力
#include "camera.h"			// カメラ

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//=============================================================================
// コンストラクタ										(public)	*** CGauge ***
//=============================================================================
CGauge::CGauge() : CScene(CScene::PRIORITY_UI, CScene::OBJTYPE_GAUGE)
{
	// 初期値設定
	m_pos	= D3DXVECTOR3(0.0f, 0.0f, 0.0f);	// 位置
	m_size	= D3DXVECTOR3(0.0f, 0.0f, 0.0f);	// 大きさ
}

//=============================================================================
// デストラクタ										(public)	*** CGauge ***
//=============================================================================
CGauge::~CGauge()
{

}

//=============================================================================
// ロード処理										(public)	*** CGauge ***
//=============================================================================
HRESULT CGauge::Load(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// アンロード処理										(public)	*** CGauge ***
//=============================================================================
void CGauge::Unload(void)
{

}

//=============================================================================
// クリエイト										(public)	*** CGauge ***
//=============================================================================
CGauge *CGauge::Create(TYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXCOLOR col)
{
	CGauge *pGauge = NULL;			// ポインタ

	if (pGauge == NULL)
	{// NULLの場合
		if(type == TYPE_2D)			// ゲージ2D
			pGauge = new CGauge2D;		// メモリ確保
		else if (type == TYPE_3D)	// ゲージ3D
			pGauge = new CGauge3D;		// メモリ確保
	}

	if (pGauge != NULL)
	{// NULL以外の場合
		pGauge->m_pos = pos;		// 位置
		pGauge->m_size = size;		// 大きさ
		pGauge->m_col = col;		// 色
		pGauge->Init();				// 初期化処理
	}

	return pGauge;	// 値を返す
}

//=============================================================================
// 終了処理											(public)	*** CGauge ***
//=============================================================================
void CGauge::Uninit(void)
{
	CScene::SetDeath();		// 死亡フラグ
}

//-----------------------------------------------------------------------------

//=============================================================================
// コンストラクタ										(public)	*** CGauge2D ***
//=============================================================================
CGauge2D::CGauge2D() : CGauge()
{

}

//=============================================================================
// デストラクタ										(public)	*** CGauge2D ***
//=============================================================================
CGauge2D::~CGauge2D()
{

}

//=============================================================================
// ロード処理										(public)	*** CGauge2D ***
//=============================================================================
HRESULT CGauge2D::Load(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// アンロード処理										(public)	*** CGauge2D ***
//=============================================================================
void CGauge2D::Unload(void)
{

}

//=============================================================================
// 初期化処理										(public)	*** CGauge2D ***
//=============================================================================
HRESULT CGauge2D::Init(void)
{
	// ゲージ
	for (int nCount = 0; nCount < TYPE_MAX; nCount++)
	{// 種類カウント
		if (m_pGause2D[nCount] == NULL)
		{// NULLの場合
			// メモリ確保
			m_pGause2D[nCount] = new CScene2D(CScene::PRIORITY_UI, CScene::OBJTYPE_GAUGE);
			// 初期値設定
			m_pGause2D[nCount]->SetInitAll(m_pos, D3DXVECTOR3(m_size.x - ((m_size.y * 0.2f) * nCount), m_size.y - ((m_size.y * 0.2f) * nCount), m_size.z),
				D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), D3DXVECTOR2(1.0f, 1.0f));
			// 初期化処理
			m_pGause2D[nCount]->Init();

			if (nCount == 1)
			{
				m_pGause2D[nCount]->Setcol(m_col);
			}
		}
	}

	// 大きさ調整
	m_size = D3DXVECTOR3(m_size.x - (m_size.y * 0.2f), m_size.y - (m_size.y * 0.2f), m_size.z);

	return S_OK;	// 値を返す
}

//=============================================================================
// 終了処理											(public)	*** CGauge2D ***
//=============================================================================
void CGauge2D::Uninit(void)
{
	// ゲージ
	for (int nCount = 0; nCount < TYPE_MAX; nCount++)
	{// 種類カウント
		if (m_pGause2D[nCount] != NULL)
		{// NULL以外の場合
			m_pGause2D[nCount]->Uninit();	// 終了処理
			m_pGause2D[nCount] = NULL;		// NULLへ
		}
	}

	CGauge::Uninit();	// 終了処理
}

//=============================================================================
// 更新処理											(public)	*** CGauge2D ***
//=============================================================================
void CGauge2D::Update(void)
{

}

//=============================================================================
// 描画処理											(public)	*** CGauge2D ***
//=============================================================================
void CGauge2D::Draw(void)
{
	// ゲージ
	for (int nCount = 0; nCount < TYPE_MAX; nCount++)
	{// 種類カウント
		if (m_pGause2D[nCount] != NULL)
		{// NULL以外の場合
			m_pGause2D[nCount]->Draw();		// 描画処理
		}
	}
}
//=============================================================================
// バー設定											(public)	*** CGauge2D ***
//=============================================================================
void CGauge2D::SetBar(D3DXVECTOR3 pos, int nNow, int nMax)
{
	// 位置、大きさ取得
	D3DXVECTOR3 Gaugepos, Gaugesize;
	Gaugepos	= m_pGause2D[GAUGE_BAR]->Getpos();
	Gaugesize	= m_pGause2D[GAUGE_BAR]->Getsize();

	// 位置、大きさ計算
	Gaugesize.x = ((m_size.x * 2.0f) * (float)((float)nNow / (float)nMax)) / 2;
	Gaugepos.x	= (m_pos.x - m_size.x) + Gaugesize.x;

	// 位置、大きさ設定
	m_pGause2D[GAUGE_BAR]->Setpos(Gaugepos);
	m_pGause2D[GAUGE_BAR]->Setsize(Gaugesize);
}

//-----------------------------------------------------------------------------

//=============================================================================
// コンストラクタ										(public)	*** CGauge3D ***
//=============================================================================
CGauge3D::CGauge3D() : CGauge()
{

}

//=============================================================================
// デストラクタ										(public)	*** CGauge3D ***
//=============================================================================
CGauge3D::~CGauge3D()
{

}

//=============================================================================
// ロード処理										(public)	*** CGauge3D ***
//=============================================================================
HRESULT CGauge3D::Load(void)
{
	return S_OK;	// 値を返す
}

//=============================================================================
// アンロード処理										(public)	*** CGauge3D ***
//=============================================================================
void CGauge3D::Unload(void)
{

}

//=============================================================================
// 初期化処理										(public)	*** CGauge3D ***
//=============================================================================
HRESULT CGauge3D::Init(void)
{
	m_pos += D3DXVECTOR3(0.0f, 10.0f, 0.0f);	// 位置調整

	// ゲージ
	for (int nCount = 0; nCount < TYPE_MAX; nCount++)
	{// 種類カウント
		if (m_pGause3D[nCount] == NULL)
		{// NULLの場合
		 // メモリ確保
			m_pGause3D[nCount] = new CScene3D(CScene::PRIORITY_UI, CScene::OBJTYPE_GAUGE);
			// 初期値設定
			m_pGause3D[nCount]->SetInitAll(m_pos, D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(m_size.x - ((m_size.y * 0.2f) * nCount), m_size.y - ((m_size.y * 0.2f) * nCount), m_size.z),
				D3DXCOLOR(1.0f, 1.0f * (nCount ^ 1), 1.0f * (nCount ^ 1), 1.0f), D3DXVECTOR2(1.0f, 1.0f), CScene3D::SCENE3DTYPE_BILLBOARD);
			m_pGause3D[nCount]->DrawEdit(false, false, false, false, true);
			// 初期化処理
			m_pGause3D[nCount]->Init();			
		}
	}

	// 大きさ調整
	m_size = D3DXVECTOR3(m_size.x - (m_size.y * 0.2f), m_size.y - (m_size.y * 0.2f), m_size.z);

	return S_OK;	// 値を返す
}

//=============================================================================
// 終了処理											(public)	*** CGauge3D ***
//=============================================================================
void CGauge3D::Uninit(void)
{
	// ゲージ
	for (int nCount = 0; nCount < TYPE_MAX; nCount++)
	{// 種類カウント
		if (m_pGause3D[nCount] != NULL)
		{// NULL以外の場合
			m_pGause3D[nCount]->Uninit();	// 終了処理
			m_pGause3D[nCount] = NULL;		// NULLへ
		}
	}

	CGauge::Uninit();	// 終了処理
}

//=============================================================================
// 更新処理											(public)	*** CGauge3D ***
//=============================================================================
void CGauge3D::Update(void)
{

}

//=============================================================================
// 描画処理											(public)	*** CGauge3D ***
//=============================================================================
void CGauge3D::Draw(void)
{
	// ゲージ
	for (int nCount = 0; nCount < TYPE_MAX; nCount++)
	{// 種類カウント
		if (m_pGause3D[nCount] != NULL)
		{// NULL以外の場合
			m_pGause3D[nCount]->Draw();		// 描画処理
		}
	}
}

//=============================================================================
// バー設定											(public)	*** CGauge3D ***
//=============================================================================
void CGauge3D::SetBar(D3DXVECTOR3 pos, int nNow, int nMax)
{
	if (m_pGause3D[GAUGE_BAR] != NULL)
	{// NULL以外の場合
		// 位置、大きさ調整計算
		m_pos = pos + D3DXVECTOR3(0.0f, 10.0f, 0.0f);
		D3DXVECTOR3 size = D3DXVECTOR3(((m_size.x * 2.0f) * (float)((float)nNow / (float)nMax)), m_size.y, m_size.z);

		// 頂点位置設定
		D3DXVECTOR3 vexSize[4];
		vexSize[0] = D3DXVECTOR3(-m_size.x, m_size.y, m_size.z);
		vexSize[1] = D3DXVECTOR3(-m_size.x + size.x, m_size.y, m_size.z);
		vexSize[2] = D3DXVECTOR3(-m_size.x, -m_size.y, -m_size.z);
		vexSize[3] = D3DXVECTOR3(-m_size.x + size.x, -m_size.y, -m_size.z);

		// 位置、大きさ設定
		m_pGause3D[GAUGE_BAR]->Setpos(m_pos);
		m_pGause3D[GAUGE_BAR]->SetVtxSize(vexSize);
	}
}