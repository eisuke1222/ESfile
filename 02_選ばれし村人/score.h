//=========================================================================================================================
// 
// スコア処理 [score.h]
// Author : Eisuke Sakagawa
// 
//=========================================================================================================================
#ifndef _SCORE_H_
#define _SCORE_H_

//*************************************************************************************************************************
// インクルードファイル
//*************************************************************************************************************************
#include "main.h"

//*************************************************************************************************************************
// 構造体定義
//*************************************************************************************************************************
typedef enum
{// 種類
	SCORETYPE_SCORE = 0,		// スコア
	SCORETYPE_RANKING,			// ランキング
	SCORETYPE_MAX,		
}SCORETYPE;

typedef struct
{// スコア
	int nScore;					// スコア
	D3DXVECTOR3 pos;			// 位置
	D3DXVECTOR3 move;			// 移動
	float fLimitMove;			// 移動制限
	D3DXVECTOR3 fRadius;		// 大きさ（半径）
	D3DXCOLOR col;				// 色
	int nSetNum;				// 桁数
	SCORETYPE type;				// 種類
	bool bUse;					// 使用しているかどうか
}Score;

//*************************************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************************************
void InitScore(void);			// スコア初期化処理
void UninitScore(void);			// スコア終了処理
void UpdateScore(void);			// スコア更新処理
void DrawScore(void);			// スコア描画

void SetScore(D3DXVECTOR3 pos, D3DXVECTOR3 fRadius, D3DXCOLOR col, SCORETYPE type);		// スコア設定処理
Score GetScore(void);							// スコア取得処理
void AddScore(SCORETYPE Type, int nValue);		// スコア加算処理
void SetRankingScore(void);						// スコア格納処理
void DeleteScore(void);							// スコア破棄処理

void SaveScore(void);						// スコアセーブ処理
void LoadScore(void);							// スコアロード処理

#endif